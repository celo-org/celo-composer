{
  "address": "0x062e516c761073476EBeD1806598F8392793B80e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "proposalNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "chairperson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "giveRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerName",
      "outputs": [
        {
          "internalType": "string",
          "name": "winnerName_",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningProposal_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd60f16f33d7d7608f373cf07d018159dc24da5d18e6f1674752311ba5338b03",
  "receipt": {
    "to": null,
    "from": "0xa0b042E5DD0C27c33dBDD23fd3B1E4a79CaC2AbD",
    "contractAddress": "0x062e516c761073476EBeD1806598F8392793B80e",
    "transactionIndex": 0,
    "gasUsed": "1285202",
    "logsBloom": "0x
    "blockHash": "0x7b96b18abcc2e889a5c141adffaef2d8bf48f670ed5e3e5483f9915de9abe4cf",
    "transactionHash": "0xdd60f16f33d7d7608f373cf07d018159dc24da5d18e6f1674752311ba5338b03",
    "logs": [],
    "blockNumber": 10000077,
    "cumulativeGasUsed": "1285202",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "proposition 1",
      "proposition 2"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "4ee04dd45c4f6c5107875a8df3c4c9ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"proposalNames\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"chairperson\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"giveRightToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"winnerName_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements voting process along with vote delegation\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Create a new ballot to choose one of 'proposalNames'.\",\"params\":{\"proposalNames\":\"names of proposals\"}},\"delegate(address)\":{\"details\":\"Delegate your vote to the voter 'to'.\",\"params\":{\"to\":\"address to which vote is delegated\"}},\"getVote()\":{\"details\":\"get Proposal index sender has voted for\"},\"getWeight()\":{\"details\":\"get Weight of sender\"},\"giveRightToVote(address)\":{\"details\":\"Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.\",\"params\":{\"voter\":\"address of voter\"}},\"hasVoted()\":{\"details\":\"Test sender having already voted\"},\"vote(uint256)\":{\"details\":\"Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\",\"params\":{\"proposal\":\"index of proposal in the proposals array\"}},\"winnerName()\":{\"details\":\"Calls winningProposal() function to get the index of the winner contained in the proposals array and then\",\"returns\":{\"winnerName_\":\"the name of the winner\"}},\"winningProposal()\":{\"details\":\"Computes the winning proposal taking all previous votes into account.\",\"returns\":{\"winningProposal_\":\"index of winning proposal in the proposals array\"}}},\"title\":\"Ballot\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ballot.sol\":\"Ballot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @title Ballot\\r\\n * @dev Implements voting process along with vote delegation\\r\\n */\\r\\ncontract Ballot {\\r\\n\\r\\n    struct Voter {\\r\\n        uint weight; // weight is accumulated by delegation\\r\\n        bool voted;  // if true, that person already voted\\r\\n        address delegate; // person delegated to\\r\\n        uint vote;   // index of the voted proposal\\r\\n    }\\r\\n\\r\\n    struct Proposal {\\r\\n        string name;   // short name\\r\\n        uint voteCount; // number of accumulated votes\\r\\n    }\\r\\n\\r\\n    address public chairperson;\\r\\n\\r\\n    mapping(address => Voter) public voters;\\r\\n\\r\\n    Proposal[] public proposals;\\r\\n\\r\\n    /**\\r\\n     * @dev Create a new ballot to choose one of 'proposalNames'.\\r\\n     * @param proposalNames names of proposals\\r\\n     */\\r\\n    constructor(string[] memory proposalNames) {\\r\\n        chairperson = msg.sender;\\r\\n        voters[chairperson].weight = 1;\\r\\n\\r\\n        for (uint i = 0; i < proposalNames.length; i++) {\\r\\n            // 'Proposal({...})' creates a temporary\\r\\n            // Proposal object and 'proposals.push(...)'\\r\\n            // appends it to the end of 'proposals'.\\r\\n            proposals.push(Proposal({\\r\\n            name: proposalNames[i],\\r\\n            voteCount: 0\\r\\n            }));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Test sender having already voted\\r\\n     */\\r\\n    function hasVoted() public view returns(bool) {\\r\\n        return(voters[msg.sender].voted);\\r\\n    }\\r\\n    /**\\r\\n     * @dev get Weight of sender\\r\\n     */\\r\\n    function getWeight() public view returns(uint) {\\r\\n        return(voters[msg.sender].weight);\\r\\n    }\\r\\n    /**\\r\\n     * @dev get Proposal index sender has voted for\\r\\n     */\\r\\n    function getVote() public view returns(uint) {\\r\\n        return(voters[msg.sender].vote);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.\\r\\n      * @param voter address of voter\\r\\n      */\\r\\n    function giveRightToVote(address voter) public {\\r\\n        require(\\r\\n            msg.sender == chairperson,\\r\\n            \\\"Only chairperson can give right to vote.\\\"\\r\\n        );\\r\\n        require(\\r\\n            !voters[voter].voted,\\r\\n            \\\"The voter already voted.\\\"\\r\\n        );\\r\\n        require(voters[voter].weight == 0);\\r\\n        voters[voter].weight = 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegate your vote to the voter 'to'.\\r\\n     * @param to address to which vote is delegated\\r\\n     */\\r\\n    function delegate(address to) public {\\r\\n        Voter storage sender = voters[msg.sender];\\r\\n        require(!sender.voted, \\\"You already voted.\\\");\\r\\n        require(to != msg.sender, \\\"Self-delegation is disallowed.\\\");\\r\\n\\r\\n        while (voters[to].delegate != address(0)) {\\r\\n            to = voters[to].delegate;\\r\\n\\r\\n            // We found a loop in the delegation, not allowed.\\r\\n            require(to != msg.sender, \\\"Found loop in delegation.\\\");\\r\\n        }\\r\\n        sender.voted = true;\\r\\n        sender.delegate = to;\\r\\n        Voter storage delegate_ = voters[to];\\r\\n        if (delegate_.voted) {\\r\\n            // If the delegate already voted,\\r\\n            // directly add to the number of votes\\r\\n            proposals[delegate_.vote].voteCount += sender.weight;\\r\\n        } else {\\r\\n            // If the delegate did not vote yet,\\r\\n            // add to her weight.\\r\\n            delegate_.weight += sender.weight;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.\\r\\n     * @param proposal index of proposal in the proposals array\\r\\n     */\\r\\n    function vote(uint proposal) public {\\r\\n        Voter storage sender = voters[msg.sender];\\r\\n        require(sender.weight != 0, \\\"Has no right to vote\\\");\\r\\n        require(!sender.voted, \\\"Already voted.\\\");\\r\\n        sender.voted = true;\\r\\n        sender.vote = proposal;\\r\\n\\r\\n        // If 'proposal' is out of the range of the array,\\r\\n        // this will throw automatically and revert all\\r\\n        // changes.\\r\\n        proposals[proposal].voteCount += sender.weight;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the winning proposal taking all previous votes into account.\\r\\n     * @return winningProposal_ index of winning proposal in the proposals array\\r\\n     */\\r\\n    function winningProposal() public view\\r\\n    returns (uint winningProposal_)\\r\\n    {\\r\\n        uint winningVoteCount = 0;\\r\\n        for (uint p = 0; p < proposals.length; p++) {\\r\\n            if (proposals[p].voteCount > winningVoteCount) {\\r\\n                winningVoteCount = proposals[p].voteCount;\\r\\n                winningProposal_ = p;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calls winningProposal() function to get the index of the winner contained in the proposals array and then\\r\\n     * @return winnerName_ the name of the winner\\r\\n     */\\r\\n    function winnerName() public view\\r\\n    returns (string memory winnerName_)\\r\\n    {\\r\\n        winnerName_ = proposals[winningProposal()].name;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9b53798f6b2f625084ea53bedce09f390b09f26722a5d9bcfff21f0b3a332ba\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a0e38038062001a0e833981810160405281019062000037919062000396565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b8151811015620001af576002604051806040016040528084848151811062000133577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181526020016000815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906200018c929190620001b7565b506020820151816001015550508080620001a69062000515565b915050620000e2565b505062000601565b828054620001c590620004a9565b90600052602060002090601f016020900481019282620001e9576000855562000235565b82601f106200020457805160ff191683800117855562000235565b8280016001018555821562000235579182015b828111156200023457825182559160200191906001019062000217565b5b50905062000244919062000248565b5090565b5b808211156200026357600081600090555060010162000249565b5090565b60006200027e620002788462000404565b620003db565b905080838252602082019050828560208602820111156200029e57600080fd5b60005b85811015620002ed57815167ffffffffffffffff811115620002c257600080fd5b808601620002d1898262000369565b85526020850194506020840193505050600181019050620002a1565b5050509392505050565b60006200030e620003088462000433565b620003db565b9050828152602081018484840111156200032757600080fd5b6200033484828562000473565b509392505050565b600082601f8301126200034e57600080fd5b81516200036084826020860162000267565b91505092915050565b600082601f8301126200037b57600080fd5b81516200038d848260208601620002f7565b91505092915050565b600060208284031215620003a957600080fd5b600082015167ffffffffffffffff811115620003c457600080fd5b620003d2848285016200033c565b91505092915050565b6000620003e7620003fa565b9050620003f58282620004df565b919050565b6000604051905090565b600067ffffffffffffffff821115620004225762000421620005c1565b5b602082029050602081019050919050565b600067ffffffffffffffff821115620004515762000450620005c1565b5b6200045c82620005f0565b9050602081019050919050565b6000819050919050565b60005b838110156200049357808201518184015260208101905062000476565b83811115620004a3576000848401525b50505050565b60006002820490506001821680620004c257607f821691505b60208210811415620004d957620004d862000592565b5b50919050565b620004ea82620005f0565b810181811067ffffffffffffffff821117156200050c576200050b620005c1565b5b80604052505050565b6000620005228262000469565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000558576200055762000563565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6113fd80620006116000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063609ff1bd11610071578063609ff1bd1461015357806364821338146101715780639e7b8d611461018f578063a3ec138d146101ab578063a9b4b780146101de578063e2ba53f0146101fc576100a9565b80630121b93f146100ae578063013cf08b146100ca5780630242f351146100fb5780632e4176cf146101195780635c19a95c14610137575b600080fd5b6100c860048036038101906100c39190610d31565b61021a565b005b6100e460048036038101906100df9190610d31565b610387565b6040516100f2929190610f0d565b60405180910390f35b610103610443565b604051610110919061101d565b60405180910390f35b61012161048d565b60405161012e9190610eb5565b60405180910390f35b610151600480360381019061014c9190610d08565b6104b1565b005b61015b610873565b604051610168919061101d565b60405180910390f35b610179610947565b6040516101869190610ed0565b60405180910390f35b6101a960048036038101906101a49190610d08565b61099e565b005b6101c560048036038101906101c09190610d08565b610b55565b6040516101d59493929190611038565b60405180910390f35b6101e6610bb2565b6040516101f3919061101d565b60405180910390f35b610204610bfc565b6040516102119190610eeb565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156102a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029c90610f3d565b60405180910390fd5b8060010160009054906101000a900460ff16156102f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ee90610f5d565b60405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546002838154811061035c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600101600082825461037c9190611099565b925050819055505050565b6002818154811061039757600080fd5b90600052602060002090600202016000915090508060000180546103ba9061116a565b80601f01602080910402602001604051908101604052809291908181526020018280546103e69061116a565b80156104335780601f1061040857610100808354040283529160200191610433565b820191906000526020600020905b81548152906001019060200180831161041657829003601f168201915b5050505050908060010154905082565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff1615610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90610f7d565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90610ffd565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461072557600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071790610fbd565b60405180910390fd5b6105b6565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff161561084e5781600001546002826002015481548110610822577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010160008282546108429190611099565b9250508190555061086e565b81600001548160000160008282546108669190611099565b925050819055505b505050565b6000806000905060005b6002805490508110156109425781600282815481106108c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010154111561092f5760028181548110610917577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001015491508092505b808061093a9061119c565b91505061087d565b505090565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390610f9d565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390610fdd565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610b0b57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905090565b60606002610c08610873565b81548110610c3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016000018054610c5b9061116a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c879061116a565b8015610cd45780601f10610ca957610100808354040283529160200191610cd4565b820191906000526020600020905b815481529060010190602001808311610cb757829003601f168201915b5050505050905090565b600081359050610ced81611399565b92915050565b600081359050610d02816113b0565b92915050565b600060208284031215610d1a57600080fd5b6000610d2884828501610cde565b91505092915050565b600060208284031215610d4357600080fd5b6000610d5184828501610cf3565b91505092915050565b610d63816110ef565b82525050565b610d7281611101565b82525050565b6000610d838261107d565b610d8d8185611088565b9350610d9d818560208601611137565b610da681611243565b840191505092915050565b6000610dbe601483611088565b9150610dc982611254565b602082019050919050565b6000610de1600e83611088565b9150610dec8261127d565b602082019050919050565b6000610e04601283611088565b9150610e0f826112a6565b602082019050919050565b6000610e27602883611088565b9150610e32826112cf565b604082019050919050565b6000610e4a601983611088565b9150610e558261131e565b602082019050919050565b6000610e6d601883611088565b9150610e7882611347565b602082019050919050565b6000610e90601e83611088565b9150610e9b82611370565b602082019050919050565b610eaf8161112d565b82525050565b6000602082019050610eca6000830184610d5a565b92915050565b6000602082019050610ee56000830184610d69565b92915050565b60006020820190508181036000830152610f058184610d78565b905092915050565b60006040820190508181036000830152610f278185610d78565b9050610f366020830184610ea6565b9392505050565b60006020820190508181036000830152610f5681610db1565b9050919050565b60006020820190508181036000830152610f7681610dd4565b9050919050565b60006020820190508181036000830152610f9681610df7565b9050919050565b60006020820190508181036000830152610fb681610e1a565b9050919050565b60006020820190508181036000830152610fd681610e3d565b9050919050565b60006020820190508181036000830152610ff681610e60565b9050919050565b6000602082019050818103600083015261101681610e83565b9050919050565b60006020820190506110326000830184610ea6565b92915050565b600060808201905061104d6000830187610ea6565b61105a6020830186610d69565b6110676040830185610d5a565b6110746060830184610ea6565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60006110a48261112d565b91506110af8361112d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110e4576110e36111e5565b5b828201905092915050565b60006110fa8261110d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561115557808201518184015260208101905061113a565b83811115611164576000848401525b50505050565b6000600282049050600182168061118257607f821691505b6020821081141561119657611195611214565b5b50919050565b60006111a78261112d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111da576111d96111e5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b7f596f7520616c726561647920766f7465642e0000000000000000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e0000600082015250565b6113a2816110ef565b81146113ad57600080fd5b50565b6113b98161112d565b81146113c457600080fd5b5056fea264697066735822122020b45c79477cd5c3def2c1cba32d71852536c2e4b13caac77c8273f677a30b3264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063609ff1bd11610071578063609ff1bd1461015357806364821338146101715780639e7b8d611461018f578063a3ec138d146101ab578063a9b4b780146101de578063e2ba53f0146101fc576100a9565b80630121b93f146100ae578063013cf08b146100ca5780630242f351146100fb5780632e4176cf146101195780635c19a95c14610137575b600080fd5b6100c860048036038101906100c39190610d31565b61021a565b005b6100e460048036038101906100df9190610d31565b610387565b6040516100f2929190610f0d565b60405180910390f35b610103610443565b604051610110919061101d565b60405180910390f35b61012161048d565b60405161012e9190610eb5565b60405180910390f35b610151600480360381019061014c9190610d08565b6104b1565b005b61015b610873565b604051610168919061101d565b60405180910390f35b610179610947565b6040516101869190610ed0565b60405180910390f35b6101a960048036038101906101a49190610d08565b61099e565b005b6101c560048036038101906101c09190610d08565b610b55565b6040516101d59493929190611038565b60405180910390f35b6101e6610bb2565b6040516101f3919061101d565b60405180910390f35b610204610bfc565b6040516102119190610eeb565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156102a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029c90610f3d565b60405180910390fd5b8060010160009054906101000a900460ff16156102f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ee90610f5d565b60405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546002838154811061035c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060020201600101600082825461037c9190611099565b925050819055505050565b6002818154811061039757600080fd5b90600052602060002090600202016000915090508060000180546103ba9061116a565b80601f01602080910402602001604051908101604052809291908181526020018280546103e69061116a565b80156104335780601f1061040857610100808354040283529160200191610433565b820191906000526020600020905b81548152906001019060200180831161041657829003601f168201915b5050505050908060010154905082565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff1615610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90610f7d565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90610ffd565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461072557600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071790610fbd565b60405180910390fd5b6105b6565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff161561084e5781600001546002826002015481548110610822577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010160008282546108429190611099565b9250508190555061086e565b81600001548160000160008282546108669190611099565b925050819055505b505050565b6000806000905060005b6002805490508110156109425781600282815481106108c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010154111561092f5760028181548110610917577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001015491508092505b808061093a9061119c565b91505061087d565b505090565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390610f9d565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390610fdd565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610b0b57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905090565b60606002610c08610873565b81548110610c3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016000018054610c5b9061116a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c879061116a565b8015610cd45780601f10610ca957610100808354040283529160200191610cd4565b820191906000526020600020905b815481529060010190602001808311610cb757829003601f168201915b5050505050905090565b600081359050610ced81611399565b92915050565b600081359050610d02816113b0565b92915050565b600060208284031215610d1a57600080fd5b6000610d2884828501610cde565b91505092915050565b600060208284031215610d4357600080fd5b6000610d5184828501610cf3565b91505092915050565b610d63816110ef565b82525050565b610d7281611101565b82525050565b6000610d838261107d565b610d8d8185611088565b9350610d9d818560208601611137565b610da681611243565b840191505092915050565b6000610dbe601483611088565b9150610dc982611254565b602082019050919050565b6000610de1600e83611088565b9150610dec8261127d565b602082019050919050565b6000610e04601283611088565b9150610e0f826112a6565b602082019050919050565b6000610e27602883611088565b9150610e32826112cf565b604082019050919050565b6000610e4a601983611088565b9150610e558261131e565b602082019050919050565b6000610e6d601883611088565b9150610e7882611347565b602082019050919050565b6000610e90601e83611088565b9150610e9b82611370565b602082019050919050565b610eaf8161112d565b82525050565b6000602082019050610eca6000830184610d5a565b92915050565b6000602082019050610ee56000830184610d69565b92915050565b60006020820190508181036000830152610f058184610d78565b905092915050565b60006040820190508181036000830152610f278185610d78565b9050610f366020830184610ea6565b9392505050565b60006020820190508181036000830152610f5681610db1565b9050919050565b60006020820190508181036000830152610f7681610dd4565b9050919050565b60006020820190508181036000830152610f9681610df7565b9050919050565b60006020820190508181036000830152610fb681610e1a565b9050919050565b60006020820190508181036000830152610fd681610e3d565b9050919050565b60006020820190508181036000830152610ff681610e60565b9050919050565b6000602082019050818103600083015261101681610e83565b9050919050565b60006020820190506110326000830184610ea6565b92915050565b600060808201905061104d6000830187610ea6565b61105a6020830186610d69565b6110676040830185610d5a565b6110746060830184610ea6565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60006110a48261112d565b91506110af8361112d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110e4576110e36111e5565b5b828201905092915050565b60006110fa8261110d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561115557808201518184015260208101905061113a565b83811115611164576000848401525b50505050565b6000600282049050600182168061118257607f821691505b6020821081141561119657611195611214565b5b50919050565b60006111a78261112d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111da576111d96111e5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b7f596f7520616c726561647920766f7465642e0000000000000000000000000000600082015250565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e0000600082015250565b6113a2816110ef565b81146113ad57600080fd5b50565b6113b98161112d565b81146113c457600080fd5b5056fea264697066735822122020b45c79477cd5c3def2c1cba32d71852536c2e4b13caac77c8273f677a30b3264736f6c63430008040033",
  "devdoc": {
    "details": "Implements voting process along with vote delegation",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Create a new ballot to choose one of 'proposalNames'.",
        "params": {
          "proposalNames": "names of proposals"
        }
      },
      "delegate(address)": {
        "details": "Delegate your vote to the voter 'to'.",
        "params": {
          "to": "address to which vote is delegated"
        }
      },
      "getVote()": {
        "details": "get Proposal index sender has voted for"
      },
      "getWeight()": {
        "details": "get Weight of sender"
      },
      "giveRightToVote(address)": {
        "details": "Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.",
        "params": {
          "voter": "address of voter"
        }
      },
      "hasVoted()": {
        "details": "Test sender having already voted"
      },
      "vote(uint256)": {
        "details": "Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.",
        "params": {
          "proposal": "index of proposal in the proposals array"
        }
      },
      "winnerName()": {
        "details": "Calls winningProposal() function to get the index of the winner contained in the proposals array and then",
        "returns": {
          "winnerName_": "the name of the winner"
        }
      },
      "winningProposal()": {
        "details": "Computes the winning proposal taking all previous votes into account.",
        "returns": {
          "winningProposal_": "index of winning proposal in the proposals array"
        }
      }
    },
    "title": "Ballot",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "chairperson",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "voters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Voter)11_storage)"
      },
      {
        "astId": 27,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Proposal)16_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)16_storage)dyn_storage": {
        "base": "t_struct(Proposal)16_storage",
        "encoding": "dynamic_array",
        "label": "struct Ballot.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Voter)11_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ballot.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)11_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)16_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Proposal",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 15,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)11_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Voter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "weight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voted",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "delegate",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}